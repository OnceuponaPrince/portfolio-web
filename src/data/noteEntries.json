[
  {
    "date": "2021-09-09 00:40:06",
    "title": "I Failed A Resit",
    "content": "I never expected to fail a resit. I was supposed to be the smart one. I had been riding high off the completion and grade of Information Systems and Databases, a module I though I would fail, but managed to knock out of the park. I was feeling like for the first time, I was in control of my university journey that after all those attempts, I would be able to move passed the first year; an insurmountable hurdle that blocked me for almost 10 years. After sleepless nights and unhealthy amounts of taurine, I sent off a site that I was honestly somewhat proud of, I was happy with it. I was shocked to receive a 20, the lowest score I’ve ever gotten in my life. I failed. I wanted to give up.\n\nBut I’m going to try one more time, and I hope it works!"
  },
  {
    "date": "2021-09-09 13:49:00",
    "title": "Terminal and Git",
    "content": "I have never really used terminal before, though I know it is an integral tool in any developers arsenal. The lack of a GUI and the required knowledge of commands makes it a hefty task to complete. However, I managed to use the terminal to create my portfolio files, install dependencies and send it to a repository on Github.\n\n Github is also very well-known for developers, so it was necessary that I start using it to build work experience for future jobs. Here are some of the commands that I learnt:\n\n <ul className=\\\"notes-list\\\"><li>mkdir - creates a new folder</li><li>cd .. - takes you one level higher in your directory</li><li>cd ~ - takes you to the highest level in your directory</li><li>git init - initialises an empty git repository for your local system</li><li>npm init - initialises a node.js project</li><li>npm install - installs dependencies for your project</li><li>git add . - prepares all untracked files for a git commit</li></ul><p className=\\\"plain-text\\\">Now that I have learnt them, it all seems so simple.</p>"
  },
  {
    "date": "2021-09-10 00:33:12",
    "title": "Writing, Code, Comedy",
    "content": "I perform stand up comedy in my spare time. I would even go as far as saying I’m pretty good at it. Often people ask me what it takes to be a good comedian.\n\n There’s a lot of theory behind comedy - writing, performance, stage presence, the list goes on. But even with all the theory, nothing beats the experience. Comedy, especially standup is very experiential. Nothing is funny until you see it in the wild; until you can see the reaction of the audience. Even then, what might work on one night in one venue, might absolutely bomb on another night in the same venue or in the same night at a different venue.\n\n I find myself drawing parallels with coding. It’s easy to get caught up as a budding developer with all the tutorials available, with all the courses out there. It’s truly overwhelming. However, you can never truly be sure whether your code works or how much code you actually know until you start coding. Then, you get your hands dirty and things start to break. You bash your head against the wall and you cry as the cursor taunts you. Error after error after error.\n\n But like comedy, when it works, the feeling of euphoria is massive. Like a drug hit, you have the eureka moment! You feel like the world is in your hands and you start over again.\n\n There is an overlap within comedy and computer science. I’m frustratingly pleased that I attempt to do both."
  },
  {
    "date": "2021-09-10 17:08:33",
    "title": "Autism, ADHD and other superpowers",
    "content": "Hi, I have ADHD. This isn’t a some way for me to get your sympathy. People have a misunderstanding of ADHD, but what it means is that sometimes I’ll be doing something important and then suddenly I just… Hi, I have ADHD...\n\n When I started comedy, this was the first joke that I ever wrote. It got a lot of laughs that night and every following night that I performed that bit.\n\n I never really understood what it meant to have a learning difference. I had gone through most of my life believing that I was in control of my decisions and my actions. If I failed, I was the problem. If I couldn’t grasp something, I was just too dumb.\n\n In late 2020, I got my first assessment and it opened my eyes to a whole new world of understanding. Previously held notions of being broken or being not enough were replaced with new ideologies. My lack of knowledge had caused me to be operating on hard-mode non-stop.\n\n Suddenly, I could understand why I couldn’t think in the way most people did. I could understand why my perception and the way I processed information was the way it was.\n\n With proper support, medication and mentoring I could change my life.\n\n But, this was just the beginning. Through further assessments and further education I learnt that I also have Dyspraxia, Autism, Dyslexia and a mild form of Epilepsy exacerbated by hypoglycaemia.\n\n On paper, I shouldn’t be achieving the way that I should. Though I didn’t know it, these differences had allowed me to live a life that my brain had been tailoring for me. My world had become my oyster. There are still setbacks and difficulties but I’m reminded of the all too famous Spider-Man quote.\n\n<q className=\\\"quote-text\\\">With great power comes great responsibility.</q>\n\n I need to be aware of what I need to take care of myself, then think of how I can turn those into my strengths.\n\n My ADHD, Autism, Dyspraxia and other conditions are my superpowers."
  },
  {
    "date": "2021-09-11 01:38:23",
    "title": "Can You Smell the Code?",
    "content": "Code smell is an epidemic to developers everywhere. The cacophony of programming languages used by hacks to cut corners and fit square pegs in round holes. Upon hearing of the concept of programmers intentionally nesting blocks of code in different languages within each other, most would hope that they are not capable of coming up with such inefficient solutions. After all, peak programming is efficiency and reuse. Languages are typically built with the purpose of solving every possible problem in mind. Yet, every so often, even the best programmer may find themself writing a JavaScript function inside PHP. This page alone is guilty of this in many sections. \n\nNo language is ideal. Many of them suffer from flaws, bugs and inherently \\\"opinionated\\\" functions that leave no space for people to work with. With concepts like <italic>styled</italic>—a library that uses CSS syntax to pass JavaScript variables into React components (hope that doesn’t confuse you)—and Chromebook’s stripped back OS that includes a built-in Linux virtual machine switch, knowing that developers will need this to do anything significant on their machine, it’s clear that code smell isn’t just a sign of amateur code methodologies, but rather, a symptom of outdated coding ideologies.\n\nAlthough languages are built and constantly updated to handle every possible problem in mind, these problems are still in the minds of the people who create such libraries. JavaScript is a great example of this. Built with lax syntax, the language was intended for people who didn’t want to struggle carrying code typically made in strict languages such as C into front-end development. Naturally, people used to HTML and CSS wouldn’t want to deal with too many rules. Who wants their page to break on every typo? Yet, despite the revolutionary nature of JavaScript, its lax syntax has led to many an error or difficulty with programmers, such that these errors brought about the creation of TypeScript—a library that essentially takes away the very intention of JavaScript.\n\nSome might say that in the above case, TypeScript allows accessibility for those who struggle with spelling, variable names, function calls. Others might say that ignores those who benefit from having the freedom to call what doesn’t exist and so forth. But what’s undeniable is that programming languages—all languages—are inherently the product of human beings. Their strengths and flaws both reflect the beliefs of the creator and each contributor onwards. Code smell, while it should be avoided, shouldn’t be derided when found, especially not without examining the languages that almost necessitate this phenomenon to meet the desires of the many programmers around the world."
  }
]
